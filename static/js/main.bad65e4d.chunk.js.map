{"version":3,"sources":["utility/Header.jsx","utility/Modal.jsx","components/login/Login.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","this","props","hasToken","title","onClick","href","className","PureComponent","Modal","style","display","showModal","e","stopPropagation","children","Login","onChange","onSubmit","name","msg","required","pattern","type","value","color","App","state","roles","randomChampions","summonerName","toggleModal","bind","saveSummonerName","logout","localStorage","getItem","setState","rollChampions","modal","target","preventDefault","test","setItem","console","log","divs","map","champ","index","key","rerollChampion","src","process","image","height","width","alt","champs","length","element","rollChampion","someChampIsSame","push","random","Math","floor","Object","keys","champions","data","full","array","newChamp","some","currChamp","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"6+kIAEqBA,E,iLACP,IAAD,EAC8BC,KAAKC,MAAlCC,EADD,EACCA,SAAUC,EADX,EACWA,MAAOC,EADlB,EACkBA,QACvB,OACI,6BACI,4BACI,uBAAGC,KAAK,KACHF,IAIT,yBAAKG,UAAU,qBACX,yBAAKA,UAAU,SAASF,QAASA,GAAUF,EAAU,kBAAoB,yB,GAZzDK,iBCAfC,E,iLAEb,OACI,yBAAKF,UAAU,QAAQG,MAAO,CAAEC,QAASV,KAAKC,MAAMU,UAAY,GAAK,QAAUP,QAASJ,KAAKC,MAAMG,SAC/F,yBAAKE,UAAU,gBAAgBF,QAAS,SAACQ,GAAD,OAAOA,EAAEC,oBAC5Cb,KAAKC,MAAMa,e,GALGP,iBCCdQ,G,uLACP,IAAD,EACkCf,KAAKC,MAAvCe,EADA,EACAA,SAAUC,EADV,EACUA,SAAUC,EADpB,EACoBA,KAAMC,EAD1B,EAC0BA,IAC/B,OACI,0BAAMb,UAAU,kBAAkBW,SAAUA,GACxC,yBAAKX,UAAU,eACX,gDAEI,2BAAOc,UAAQ,EAACC,QAAS,iBAAkBC,KAAK,OAAOJ,KAAK,eAAeF,SAAUA,EAAUO,MAAOL,MAI1GC,GAEA,0BAAMV,MAAO,CAACe,MAAM,QAASL,GAEjC,2BAAOG,KAAK,SAASlB,QAASa,EAAUM,MAAM,c,GAhB3BhB,kBCiIpBkB,E,YA5Hd,WAAYxB,GAAQ,IAAD,8BAClB,4CAAMA,KAEDyB,MAAQ,CACZC,MAAO,CAAC,MAAO,SAAU,MAAO,SAAU,WAC1CC,gBAAgB,GAChBjB,UAAU,GACVkB,aAAa,IAEd,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKf,SAAW,EAAKA,SAASe,KAAd,gBAChB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBACxB,EAAKE,OAAS,EAAKA,OAAOF,KAAZ,gBAZI,E,iFAgBlB,IAAIF,EAAeK,aAAaC,QAAQ,gBACxCnC,KAAKoC,SAAS,CACbR,gBAAgB5B,KAAKqC,cAAc,GACnCR,aAA+B,cAAjBA,EAA+BA,EAAe,O,kCAGlDS,GACXtC,KAAKoC,SAAS,CACbzB,UAAW2B,M,+BAGJ1B,GACRZ,KAAKoC,SAAL,eACExB,EAAE2B,OAAOrB,KAAMN,EAAE2B,OAAOhB,U,uCAGVX,GAChBA,EAAE4B,iBACC,iBAAiBC,KAAKzC,KAAK0B,MAAMG,eACnCK,aAAaQ,QAAQ,eAAgB1C,KAAK0B,MAAMG,cAChD7B,KAAK8B,YAAY,IACjB9B,KAAKoC,SAAS,CAACjB,IAAI,MAGnBnB,KAAKoC,SAAS,CACbjB,IAAI,4B,+BAMNwB,QAAQC,IAAI,SACZV,aAAaQ,QAAQ,eAAgB,IACrC1C,KAAKoC,SAAS,CACbP,aAAa,O,+BAIL,IAAD,SACgD7B,KAAK0B,MAAvDE,EADE,EACFA,gBAAiBjB,EADf,EACeA,UAAWkB,EAD1B,EAC0BA,aAAcV,EADxC,EACwCA,IAC5C0B,EAAOjB,EAAgBkB,KAAI,SAACC,EAAOC,GACtC,OACC,yBAAKC,IAAKF,EAAM7B,KAAMZ,UAAU,qBAAqBF,QAAS,kBAAM,EAAK8C,eAAeF,KACvF,8BAAOD,EAAM7B,MACb,yBAAKiC,IAAG,UAAKC,QAAL,qBAAwCL,EAAMM,OAASC,OAAO,QAAQC,MAAM,QAAQC,IAAI,aAChG,8BAAO,EAAK9B,MAAMC,MAAMqB,QAK3B,OACC,yBAAK1C,UAAU,OACd,kBAAC,EAAD,CAAQH,MAAM,sBAAsBC,QAAS,kBAAQyB,EAAe,EAAKI,SAAW,EAAKH,YAAY,UAAU5B,WAAY2B,IAC3H,yBAAKvB,UAAU,iBACbuC,GAEF,4BAAQvC,UAAU,UAAlB,sFAEe,UAAdK,GACA,kBAAC,EAAD,CAAOA,UAAWA,GACjB,kBAAC,EAAD,CAAOK,SAAUhB,KAAKgB,SAAUC,SAAUjB,KAAKgC,iBAAkBb,IAAKA,Q,sCAU1E,IADA,IAAIsC,EAAS,GACPA,EAAOC,OAAS,GAAE,CACvB,IAAIC,EAAU3D,KAAK4D,eAEf5D,KAAK6D,gBAAgBJ,EAAQE,IAChCF,EAAOK,KAAKH,GAEd,OAAOF,I,qCAMP,IAAIM,EAASC,KAAKC,MAAMD,KAAKD,SAAWG,OAAOC,KAAKC,EAAUC,MAAMX,QAChET,EAAMiB,OAAOC,KAAKC,EAAUC,MAAMN,GAClCJ,EAAUS,EAAUC,KAAKpB,GAC7B,MAAO,CAAC/B,KAAMyC,EAAQzC,KAAMmC,MAAOM,EAAQN,MAAMiB,Q,sCAGlCC,EAAOC,GACtB,OAAOD,EAAME,MAAK,SAAA1B,GAAK,OAAIA,EAAM7B,OAASsD,EAAStD,U,qCAGrC8B,GAKd,IALqB,IACfpB,EAAoB5B,KAAK0B,MAAzBE,gBACF8C,EAAY9C,EAAgBoB,GAC5BwB,EAAWE,EAETF,IAAaE,GAAa1E,KAAK6D,gBAAgBjC,EAAiB4C,IACrEA,EAAWxE,KAAK4D,eAEjBhC,EAAgBoB,GAASwB,EACzBxE,KAAKoC,SAAS,CACbR,wB,GAvHe+C,aCKZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBjE,QACf2D,UAAUC,cAAcQ,YAI1BnD,QAAQC,IACN,iHAKEwC,GAAUA,EAAOW,UACnBX,EAAOW,SAASN,KAMlB9C,QAAQC,IAAI,sCAGRwC,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUP,WAO5BQ,OAAM,SAAAC,GACLvD,QAAQuD,MAAM,4CAA6CA,MC1FjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIkB,IAAInD,QAAwB0B,OAAOC,SAAS1E,MACpDmG,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAM/B,QAAN,sBAEPwB,IAgEV,SAAiCO,EAAOC,GAEtCsB,MAAMvB,GACHK,MAAK,SAAAmB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C3B,UAAUC,cAAc2B,MAAMzB,MAAK,SAAAC,GACjCA,EAAayB,aAAa1B,MAAK,WAC7BV,OAAOC,SAASoC,eAKpBjC,EAAgBC,EAAOC,MAG1Ba,OAAM,WACLtD,QAAQC,IACN,oEArFAwE,CAAwBjC,EAAOC,GAI/BC,UAAUC,cAAc2B,MAAMzB,MAAK,WACjC7C,QAAQC,IACN,iHAMJsC,EAAgBC,EAAOC,OCvC/BE,K","file":"static/js/main.bad65e4d.chunk.js","sourcesContent":["import React, { PureComponent } from 'react'\r\n\r\nexport default class Header extends PureComponent {\r\n    render() {\r\n        let { hasToken, title, onClick } = this.props;\r\n        return (\r\n            <div>\r\n                <h1>\r\n                    <a href=\"/\">\r\n                        {title}\r\n                    </a>\r\n\r\n                </h1>\r\n                <div className=\"navigation-header\">\r\n                    <div className=\"button\" onClick={onClick}>{hasToken ?'Remove summoner' : 'Choose summoner'}</div>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n","import React, { PureComponent } from 'react'\r\n\r\nexport default class Modal extends PureComponent {\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" style={{ display: this.props.showModal ? '' : 'none' }} onClick={this.props.onClick}>\r\n                <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\r\n                    {this.props.children}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { PureComponent } from 'react'\r\nimport './Login.css'\r\n\r\nexport default class Login extends PureComponent {\r\n    render() {\r\n        let {onChange, onSubmit, name, msg } = this.props\r\n        return (\r\n            <form className=\"login-container\" onSubmit={onSubmit}>\r\n                <div className=\"login-input\">\r\n                    <label>\r\n                        Summoner name:\r\n                        <input required pattern={/^[0-9a-z _.]+$/} type=\"text\" name=\"summonerName\" onChange={onChange} value={name}></input>\r\n                    </label>\r\n                </div>\r\n                {\r\n                    msg\r\n                    &&\r\n                    <span style={{color:'red'}}>{msg}</span>\r\n                }\r\n                <input type=\"submit\" onClick={onSubmit} value=\"Save\"></input>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport champions from './champion.json'\r\nimport Header from './utility/Header';\r\nimport Modal from './utility/Modal';\r\nimport Login from './components/login/Login';\r\n\r\nclass App extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\r\n\t\tthis.state = {\r\n\t\t\troles: [\"Top\", \"Jungle\", \"Mid\", \"Bottom\", \"Support\"],\r\n\t\t\trandomChampions:[],\r\n\t\t\tshowModal:'',\r\n\t\t\tsummonerName:''\r\n\t\t}\r\n\t\tthis.toggleModal = this.toggleModal.bind(this)\r\n\t\tthis.onChange = this.onChange.bind(this);\r\n\t\tthis.saveSummonerName = this.saveSummonerName.bind(this);\r\n\t\tthis.logout = this.logout.bind(this);\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tlet summonerName = localStorage.getItem('summonerName')\r\n\t\tthis.setState({\r\n\t\t\trandomChampions:this.rollChampions(5),\r\n\t\t\tsummonerName: summonerName !== 'undefined' ? summonerName : ''\r\n\t\t}) \r\n\t}\r\n\ttoggleModal(modal) {\r\n\t\tthis.setState({\r\n\t\t\tshowModal: modal\r\n\t\t})\r\n\t}\r\n\tonChange(e){\r\n\t\tthis.setState({\r\n\t\t\t[e.target.name]:e.target.value\r\n\t\t})\r\n\t}\r\n\tsaveSummonerName(e){\r\n\t\te.preventDefault();\r\n\t\tif(/^[0-9a-z _.]+$/.test(this.state.summonerName)){\r\n\t\t\tlocalStorage.setItem('summonerName', this.state.summonerName);\r\n\t\t\tthis.toggleModal('');\r\n\t\t\tthis.setState({msg:''})\r\n\t\t}\r\n\t\telse{\r\n\t\t\tthis.setState({\r\n\t\t\t\tmsg:'Invalid summoner name'\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t}\r\n\tlogout(){\r\n\t\tconsole.log('asdsa')\r\n\t\tlocalStorage.setItem('summonerName', '')\r\n\t\tthis.setState({\r\n\t\t\tsummonerName:''\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\tlet { randomChampions, showModal, summonerName, msg } = this.state;\r\n\t\tlet divs = randomChampions.map((champ, index) => {\r\n\t\t\treturn (\r\n\t\t\t\t<div key={champ.name} className=\"champion-list-item\" onClick={() => this.rerollChampion(index)}  >\r\n\t\t\t\t\t<span>{champ.name}</span>\r\n\t\t\t\t\t<img src={`${process.env.PUBLIC_URL}/champion/${champ.image}`} height='100px' width='100px' alt=\"champion\"></img>\r\n\t\t\t\t\t<span>{this.state.roles[index]}</span>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t})\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"App\" >\r\n\t\t\t\t<Header title=\"All Random All Fill\" onClick={() => !!summonerName ? this.logout() : this.toggleModal('login')} hasToken={!!summonerName}></Header>\r\n\t\t\t\t<div className=\"champion-list\" >\r\n\t\t\t\t\t{divs}\r\n\t\t\t\t</div>\r\n\t\t\t\t<footer className=\"footer\">You can now reroll a champion by clicking the image of the one you want to change.</footer>\r\n\t\t\t\t{\r\n\t\t\t\t\tshowModal === 'login' &&\r\n\t\t\t\t\t<Modal showModal={showModal}>\r\n\t\t\t\t\t\t<Login onChange={this.onChange} onSubmit={this.saveSummonerName} msg={msg}></Login>\r\n\t\t\t\t\t</Modal>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\r\n\trollChampions() {\r\n\t\tlet champs = []\r\n\t\twhile(champs.length < 5){\r\n\t\t\tlet element = this.rollChampion();\r\n\t\t\t\r\n\t\t\tif(!this.someChampIsSame(champs, element))\r\n\t\t\t\tchamps.push(element)\r\n\t\t}\r\n\t\treturn champs\r\n\t}\r\n\r\n\r\n\r\n\trollChampion(){\r\n\t\tvar random = Math.floor(Math.random() * Object.keys(champions.data).length);\r\n\t\tvar key = Object.keys(champions.data)[random];\r\n\t\tvar element = champions.data[key];\r\n\t\treturn {name: element.name, image: element.image.full}\r\n\t}\r\n\r\n\tsomeChampIsSame(array, newChamp){\r\n\t\treturn array.some(champ => champ.name === newChamp.name)\r\n\t}\r\n\t\r\n\trerollChampion(index){\r\n\t\tlet { randomChampions } = this.state;\r\n\t\tlet currChamp = randomChampions[index];\r\n\t\tlet newChamp = currChamp;\r\n\t\t\r\n\t\twhile(newChamp === currChamp || this.someChampIsSame(randomChampions, newChamp)){\r\n\t\t\tnewChamp = this.rollChampion()\r\n\t\t}\r\n\t\trandomChampions[index] = newChamp\r\n\t\tthis.setState({\r\n\t\t\trandomChampions\r\n\t\t})\r\n\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}